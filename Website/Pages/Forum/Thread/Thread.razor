@page "/thread/{TitleT}/{Author}/{Date}/{Body}/{ThreadId}"
@inject NavigationManager NavManager
@inject HttpClient Http
@inject ForumReferenceProvider Data
@using SharpScape.Shared.Dto
@using SharpScape.Website.Components.Forum
@using SharpScape.Website.Components.Forum.Pagination

@*  login imports *@
@inject ForumReferenceProvider Data
@inject HttpClient Http
@inject IAuthTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
<link href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css" rel="stylesheet">
<div class="background">
    @if (loading)
    {
        <center>
            <span class="spinner-border spinner-border-lg align-center" style=" color:#99abb4 "></span>
            <span style=" color:#99abb4 " >posts are loading</span>
        </center> 
    }
    <center>
    <a href="category/@fcd.Name/@ftd.CategoryId" class="forum-item-title"><h3> Go to @fcd.Name List </h3> </a>
    </center>
    <div class="container d-flex justify-content-center mt-100 mb-100">
        <div class="row">
            <div class="col-md-12">
                <div class="card col-md-5">
                    <div class="card-body">
                        <h4 class="card-title">@TitleT</h4>
                    </div>
                    <div class="comment-widgets m-b-20">
                        <div class="d-flex flex-row comment-row">
                            <div class="p-2"><span class="round"><img src="images/Avatar.png" alt="user" width="50"></span></div>
                            <div class="comment-text w-100">
                                <h5>@Author</h5>
                                <div class="comment-footer">
                                    <span class="date">@Date</span>
                                    <span class="action-icons">
                                        <a href="#" data-abc="true"><i class="oi oi-pencil"></i></a>
                                        <a href="#" data-abc="true"><i class="oi oi-rotate-right"></i></a>
                                    </span>
                                </div>
                                <p>@Body</p>
                                <div class="col-md-1">
                                    <div class="row">
                                        <div class="col"> <a href="#"><i class="oi oi-thumb-up"></i></a><span class="d-block text-sm">20</span> </div>
                                        <div class="col"> <i class="ion-ios-chatboxes-outline icon-1x"></i> <span class="d-block text-sm"> @posts.Count</span> </div>
                                    </div>
                                    <span class="action-icons"></span>
                                </div>
                            </div>
                        </div>
                        @foreach (ForumPostDto post in posts)
                        {
                            <Post Author=@Data.UserName
                                Date=@post.Created.ToString("D")
                                Body=@post.Body
                                Image="images/Avatar.png" 
                            />
                        }
                        <div class="pagination_background">
                            <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                        PageIndex="@pageIndex"
                                        Radius="3"
                                        OnSelectedPage="@SelectedPage">
                            </Pagination>
                        </div>
                    </div>
                    @if (CreateThread)
                    {
                        <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h4 class="modal-title">Create A Post</h4>
                                    </div>
                                    @if (Data.UserId == 0)
                                    {
                                        <EditForm Model="@userLoginDto" OnValidSubmit="@TryLogin">
                                            
                                            <center>
                                            <span> "Admin" "StrongPassword12345"</span>
                                            </center>
                                            @if (requestError is not null)
                                            {
                                                <p class="text-danger">@requestError</p>
                                            }
                                            <DataAnnotationsValidator />
                                            <div class="modal-body">
                                                <label for="username" class="col-form-label">Username:</label>
                                                <InputText class="form-control" id="username" @bind-Value="@userLoginDto.Username" />
                                                <ValidationMessage For="() => userLoginDto.Username" />
                                            </div>
                                            <div class="modal-body">
                                                <label for="password" class="col-form-label">Password:</label>
                                                <InputText class="form-control" type="password" id="password" @bind-Value="@userLoginDto.Password" />
                                                <ValidationMessage For="() => userLoginDto.Password" />
                                            </div>
                                            <div class="modal-footer">
                                                <button type="submit" class="btn btn-primary">Login</button>
                                                <a href="/register">Create an account</a>
                                            </div>
                                        </EditForm>
                                    }
                                    @if (Data.UserId != 0)
                                    {
                                        <EditForm Model="@tempPost" OnValidSubmit=@HandleValidSubmit>
                                            <div class="modal-body">
                                                <form model="@tempPost">
                                                    <div class="form-group">
                                                        <label for="message-text" class="col-form-label">Comment:</label>
                                                        <InputTextArea class="form-control" id="testing1" @bind-Value="tempPost.Body" />
                                                    </div>
                                                </form>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" @onclick="@CloseCreateThread">Close</button>
                                                <button type="submit" class="btn btn-primary">Post</button>
                                            </div>
                                        </EditForm>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="row createbutton justify-content-center">
                    <button type="button" class="btn btn-primary" @onclick="@OpenCreateThread">Make a post</button>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string Author { get; set; } = "";
    [Parameter]
    public string Title { get; set; } = "";
    [Parameter]
    public string Body { get; set; } = "";
    [Parameter]
    public string Date { get; set; } = "";
    ForumPostDto tempPost = new ForumPostDto();
    bool SubmitResult = false;
    private IList<ForumPostDto> allPosts = new List<ForumPostDto>();
    private IList<ForumPostDto> posts = new List<ForumPostDto>();
    [Parameter]
    public string ThreadId { get; set; }
    [Parameter]
    public string TitleT { get; set; }
    public bool CreateThread { get; set; } = false;
    public EventCallback<bool> OnClose { get; set; }
    private bool loading=false ;
    public ForumThreadDto ftd = new ForumThreadDto();
    public ForumCategoryDto fcd = new ForumCategoryDto();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        allPosts = await Http.GetFromJsonAsync<List<ForumPostDto>>($"/api/ForumPosts/Thread{ThreadId}");
        ftd = await Http.GetFromJsonAsync<ForumThreadDto>($"/api/ForumThreads/{ThreadId}");
        fcd = await Http.GetFromJsonAsync<ForumCategoryDto>($"/api/ForumCategories/{ftd.CategoryId}");

        if (allPosts != null)
        {
            // Initialize the number of "totalPages"
            totalPages = (int)Math.Ceiling((double)allPosts.Count() / itemsPerPage);
            // Initialize the "comments" which will be displayed when the page loaded first time.
            posts = allPosts.Skip(0).Take(itemsPerPage).ToList();
        }
        loading = false;
    }
    private async void HandleValidSubmit()
    {
        if (Data.UserId > 0 && tempPost.Body != "")
        {
            ForumPostDto post = new ForumPostDto();
            post.AuthorId = Data.UserId;
            post.ThreadId = Data.ThreadId;
            post.Body = tempPost.Body;
            post.Created = Convert.ToDateTime(DateTime.Now);
            posts.Add(post);
            CreateThread = false;
            var result = await Http.PostAsJsonAsync("/api/ForumPosts", post);
            if (result.IsSuccessStatusCode)
            {
                allPosts = await result.Content.ReadAsAsync<List<ForumPostDto>>();
                if (allPosts != null)
                {
                    // Initialize the number of "totalPages"
                    totalPages = (int)Math.Ceiling((double)allPosts.Count() / itemsPerPage);
                    // Initialize the "comments" which will be displayed when the page loaded first time.
                    posts = allPosts.Reverse().Skip(0).Take(itemsPerPage).ToList();
                }
                SelectedPage(1);
                StateHasChanged();
            }
            else
            {
                await result.Content.ReadAsStringAsync();
            }
        }
    }
    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    // pagination stuff and dummy data
    private int pageIndex = 1;
    private int itemsPerPage = 4;
    private int totalPages = 1;
    private void OpenCreateThread()
    {
        tempPost.Body = "";
        CreateThread = true;
        StateHasChanged();
    }
    private void CloseCreateThread()
    {
        CreateThread = false;
        StateHasChanged();
    }
    private void SelectedPage(int selectedPageIndex)
    {
        if (allPosts != null)
        {
            pageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (pageIndex - 1);
            posts = allPosts.Skip(skipCount).Take(itemsPerPage).ToList();
        }
    }
    /////////////////////////// login /////////////////////////////////////

    private UserLoginDto userLoginDto = new();
    private string? requestError;

    private async Task TryLogin()
    {
        var result = await Http.PostAsJsonAsync("api/login", userLoginDto);

        if (result.IsSuccessStatusCode)
        {
            //TokenProvider.Token = await result.Content.ReadAsStringAsync();
            var response = await result.Content.ReadAsAsync<UserLoginResponseDto>();
            TokenProvider.Token = response.accessToken;
            Data.UserId = response.Id;
            
            await AuthStateProvider.GetAuthenticationStateAsync();
        }
        else
        {
            requestError = await result.Content.ReadAsStringAsync();
        }
    }
}